{"version":3,"sources":["../../srvs/profile-stabilizer.service.ts"],"names":[],"mappings":"AAAA,iDAAC;AACD,iFAAiF;AACjF,gDAAgD;AAChD,yBAAyB;AACzB,gFAAgF;AAChF,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,iBAAA,EAAkB,MAAO,+BAAA,CAAA;AAElC;IACI;IAAc,CAAC;IACf,gDAAoB,GAApB,UAAqB,SAAa,EAAC,OAAW;QAC1C,MAAM,CAAA,CAAC,SAAS,CAAC,SAAS,CAAC,CAAA,CAAC;YACxB,KAAK,UAAU,EAAE,MAAM,CAAC,IAAI,iBAAiB,CAAC,OAAO,CAAC,UAAU,EAAC,OAAO,CAAC,SAAS,EAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAC,OAAO,CAAC,KAAK,EAAC,OAAO,CAAC,EAAE,EAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAC1J,KAAK,QAAQ,EAAE,MAAM,CAAC,IAAI,iBAAiB,CAAC,OAAO,CAAC,SAAS,EAAC,OAAO,CAAC,UAAU,EAAC,OAAO,CAAC,QAAQ,EAAC,OAAO,CAAC,KAAK,EAAC,OAAO,CAAC,MAAM,EAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACnJ,CAAC;IACL,CAAC;IAKD,aAAa;IACb,aAAa;IACb,2CAAe,GAAf,UAAgB,OAAW;QACvB,MAAM,CAAC,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,2DAA2D,CAAC,CAAA;IACpL,CAAC;IAGE,4BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,gCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,wBAAC;CAzBD,AAyBC,IAAA;SAzBY,iBAAiB","file":"profile-stabilizer.service.js","sourceRoot":"","sourcesContent":["//ssp social server part(this service is part of)\r\n// as different social server returns theire profile in slightly different format\r\n// ex fb has 'id' in their public profile object\r\n// while google has 'Uid'\r\n// so this service stabilizes the profile so that any server(ysp) can consume it\r\nimport { Injectable } from '@angular/core';\r\nimport { StabilizedProfile } from '../classes/stabilised-profile'\r\n\r\nexport class ProfileStabilizer {\r\n    constructor(){}\r\n    getStabilizedProfile(_circular:any,profile:any){\r\n        switch(_circular.loginType){\r\n            case 'facebook': return new StabilizedProfile(profile.first_name,profile.last_name,this.getFbProfileImg(profile),profile.email,profile.id,profile.gender);\r\n            case 'google': return new StabilizedProfile(profile.givenName,profile.familyName,profile.imageUrl,profile.email,profile.userId,profile.gender);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    // conditions\r\n    // profile fb\r\n    getFbProfileImg(profile:any){\r\n        return profile.picture && profile.picture.data && profile.picture.data.url ? profile.picture.data.url : console.log('no image found for fb profile//missing from facebook only')\r\n    }\r\n    \r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}