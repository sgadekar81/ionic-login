{"version":3,"sources":["../../srvs/ionic-login.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAE3C,OAAO,EAAE,GAAA,EAAI,MAAO,eAAA,CAAgB;AACpC,OAAO,EAAE,GAAA,EAAI,MAAO,eAAA,CAAgB;AACpC,OAAO,EAAE,aAAA,EAAc,MAAO,8BAAA,CAA+B;AAC7D,OAAO,EAAE,mBAAA,EAAoB,MAAO,+CAAA,CAAgD;AACpF,OAAO,EAAE,KAAA,EAAM,MAAO,0BAAA,CAAA;AACtB,4EAA4E;AAC5E,kCAAkC;AAElC;IACI,sBACQ,IAAQ,EACR,IAAQ,EACR,cAA4B,EAC5B,oBAAwC;QAHxC,SAAI,GAAJ,IAAI,CAAI;QACR,SAAI,GAAJ,IAAI,CAAI;QACR,mBAAc,GAAd,cAAc,CAAc;QAC5B,yBAAoB,GAApB,oBAAoB,CAAoB;QAC5C,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IACD,6BAAM,GAAN,cAAS,CAAC;IAGV,4BAAK,GAAL,UAAM,SAAgB,EAAC,OAAgB,EAAC,KAAc;QAClD,IAAI,CAAC,WAAW,CAAC,SAAS,EAAC,OAAO,EAAC,KAAK,CAAC,CAAC;QAC1C,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7F,CAAC;IACD,mCAAY,GAAZ,UAAa,OAAW;QACpB,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;QAChC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7F,CAAC;IACD,iCAAU,GAAV,UAAW,GAAO;QACd,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC;IACD,mCAAY,GAAZ,UAAa,YAAmB;QAC5B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QACpC,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,cAAc;aACd,OAAO,CAAC,cAAc,EAAE,YAAY,CAAC;aACrC,IAAI,CAAC,cAAO,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,CAAA,CAAA,CAAC,EACtC,UAAA,KAAK,IAAI,OAAA,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,KAAK,CAAC,EAA1C,CAA0C,CACtD,CAAC;IACV,CAAC;IACD,iCAAU,GAAV,UAAW,GAAO;QACd,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC;IACD,kCAAW,GAAX,UAAY,SAAgB,EAAC,OAAgB,EAAC,KAAc;QACxD,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,EAAE,CAAC;QAC7B,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;QACpC,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;QAChC,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;IAChC,CAAC;IACO,iCAAU,GAAlB;QACI,IAAI,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC;QACxB,KAAK,CAAC,OAAO,GAAG,kBAAkB,CAAC;QACnC,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,KAAK,EAAC,cAAK,CAAC,CAAC,CAAC;IACvD,CAAC;IACE,uBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,2BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,GAAG,GAAG;QACb,EAAC,IAAI,EAAE,GAAG,GAAG;QACb,EAAC,IAAI,EAAE,aAAa,GAAG;QACvB,EAAC,IAAI,EAAE,mBAAmB,GAAG;KAC5B,EAL6F,CAK7F,CAAC;IACF,mBAAC;CAxDD,AAwDC,IAAA;SAxDY,YAAY","file":"ionic-login.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Options } from '../classes/ionic-login-options';\r\nimport { Ssp } from './ssp.service';\r\nimport { Ysp } from './ysp.service';\r\nimport { NativeStorage } from '@ionic-native/native-storage';\r\nimport { IonicToastHelperSrv } from 'ionic-toast-helper/ionic-toast-helper.service';\r\nimport { Toast } from 'ionic-toast-helper/toast'\r\n// need to work more on here like send data to this module like redirect uri\r\n// and enable ysp for just be only\r\n\r\nexport class LoginService {\r\n    constructor(\r\n    private _ssp:Ssp,\r\n    private _ysp:Ysp,\r\n    private _nativeStorage:NativeStorage,\r\n    private _ionicToastHelperSrv:IonicToastHelperSrv){\r\n        this.onInit();\r\n    }\r\n    onInit(){}\r\n    options:Options;\r\n    private circular:any;\r\n    login(loginType:string,success:Function,error:Function){\r\n        this.setCircular(loginType,success,error);\r\n        this._ssp.execute(this.circular,this.onSspSuccess.bind(this),this.onSspError.bind(this));\r\n    }\r\n    onSspSuccess(profile:any){\r\n        this.circular.profile = profile;\r\n        this._ysp.execute(this.circular,this.onYspSuccess.bind(this),this.onYspError.bind(this));\r\n    }\r\n    onSspError(err:any){\r\n        this.circular.error(err);\r\n    }\r\n    onYspSuccess(access_token:string){\r\n        this.circular.success(access_token);\r\n        this.raiseToast();\r\n        this._nativeStorage\r\n            .setItem('access_token', access_token)\r\n            .then(() => {console.info('token stored')},\r\n                error => console.error('Error storing item', error)\r\n            );\r\n    }\r\n    onYspError(err:any){\r\n        this.circular.error(err);\r\n    }\r\n    setCircular(loginType:string,success:Function,error:Function){\r\n        this.circular = new Object();\r\n        this.circular.loginType = loginType;\r\n        this.circular.success = success;\r\n        this.circular.error = error;\r\n    }\r\n    private raiseToast(){\r\n        let toast = new Toast();\r\n        toast.message = 'Login Successful';\r\n        toast.position = 'bottom';\r\n        this._ionicToastHelperSrv.raiseToast(toast,()=>{});\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Ssp, },\n{type: Ysp, },\n{type: NativeStorage, },\n{type: IonicToastHelperSrv, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}